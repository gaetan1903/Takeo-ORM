/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/gaetan1903/Takeo-ORM/takeo/core */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "core.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: []bool ---
//
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);
extern long long int Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long int handle);

// --- wrapping slice: []error ---
//
extern long long int Slice_error_CTor();
extern GoInt Slice_error_len(long long int handle);
extern char* Slice_error_elem(long long int handle, GoInt _idx);
extern long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short int Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: []core.UpdateData ---
//
extern long long int Slice_core_UpdateData_CTor();
extern GoInt Slice_core_UpdateData_len(long long int handle);
extern long long int Slice_core_UpdateData_elem(long long int handle, GoInt _idx);
extern long long int Slice_core_UpdateData_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_core_UpdateData_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_core_UpdateData_append(long long int handle, long long int _vl);

// --- wrapping slice: []interface{} ---
//
extern long long int Slice_interface__CTor();
extern GoInt Slice_interface__len(long long int handle);
extern char* Slice_interface__elem(long long int handle, GoInt _idx);
extern long long int Slice_interface__subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_interface__set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_interface__append(long long int handle, char* _vl);

// --- wrapping slice: []map[string]interface{} ---
//
extern long long int Slice_Map_string_interface__CTor();
extern GoInt Slice_Map_string_interface__len(long long int handle);
extern long long int Slice_Map_string_interface__elem(long long int handle, GoInt _idx);
extern long long int Slice_Map_string_interface__subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Map_string_interface__set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Map_string_interface__append(long long int handle, long long int _vl);

// --- wrapping map: map[string]core.ColumnMetadata ---
//
extern long long int Map_string_core_ColumnMetadata_CTor();
extern GoInt Map_string_core_ColumnMetadata_len(long long int handle);
extern long long int Map_string_core_ColumnMetadata_elem(long long int handle, char* _ky);
extern char Map_string_core_ColumnMetadata_contains(long long int handle, char* _ky);
extern void Map_string_core_ColumnMetadata_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_core_ColumnMetadata_delete(long long int handle, char* _ky);
extern long long int Map_string_core_ColumnMetadata_keys(long long int handle);

// --- wrapping map: map[string]interface{} ---
//
extern long long int Map_string_interface__CTor();
extern GoInt Map_string_interface__len(long long int handle);
extern char* Map_string_interface__elem(long long int handle, char* _ky);
extern char Map_string_interface__contains(long long int handle, char* _ky);
extern void Map_string_interface__set(long long int handle, char* _ky, char* _vl);
extern void Map_string_interface__delete(long long int handle, char* _ky);
extern long long int Map_string_interface__keys(long long int handle);

// --- wrapping map: map[string]string ---
//
extern long long int Map_string_string_CTor();
extern GoInt Map_string_string_len(long long int handle);
extern char* Map_string_string_elem(long long int handle, char* _ky);
extern char Map_string_string_contains(long long int handle, char* _ky);
extern void Map_string_string_set(long long int handle, char* _ky, char* _vl);
extern void Map_string_string_delete(long long int handle, char* _ky);
extern long long int Map_string_string_keys(long long int handle);

// --- wrapping struct: core.TakeoORM ---
//
extern long long int core_TakeoORM_CTor();
extern char* core_TakeoORM_Close(long long int _handle);
extern char* core_TakeoORM_Ping(long long int _handle);
extern void core_TakeoORM_RegisterEntityByName(long long int _handle, char* typeName, char* tableName, long long int columns, char* primaryKey, long long int autoIncrementColumns, char goRun);
extern char* core_TakeoORM_CreateEntity(long long int _handle, char* typeName, long long int values);
extern char* core_TakeoORM_CreateEntitiesBatch(long long int _handle, char* typeName, long long int entitiesData);
extern long long int core_TakeoORM_FindEntityByID(long long int _handle, char* typeName, char* id);
extern long long int core_TakeoORM_FindAllEntities(long long int _handle, char* typeName);
extern char* core_TakeoORM_UpdateEntity(long long int _handle, char* typeName, char* id, long long int values);
extern char* core_TakeoORM_DeleteEntity(long long int _handle, char* typeName, char* id);
extern char* core_TakeoORM_DeleteEntitiesBatch(long long int _handle, char* typeName, long long int ids);

// --- wrapping struct: core.TakeoTransaction ---
//
extern long long int core_TakeoTransaction_CTor();
extern long long int core_TakeoTransaction_Save(long long int _handle, char* entityType, long long int entityData);
extern char* core_TakeoTransaction_Commit(long long int _handle);
extern char* core_TakeoTransaction_Rollback(long long int _handle);

// --- wrapping struct: core.ColumnMetadata ---
//
extern long long int core_ColumnMetadata_CTor();
extern char* core_ColumnMetadata_Name_Get(long long int handle);
extern void core_ColumnMetadata_Name_Set(long long int handle, char* val);
extern char* core_ColumnMetadata_Type_Get(long long int handle);
extern void core_ColumnMetadata_Type_Set(long long int handle, char* val);
extern char core_ColumnMetadata_IsPrimaryKey_Get(long long int handle);
extern void core_ColumnMetadata_IsPrimaryKey_Set(long long int handle, char val);
extern char core_ColumnMetadata_IsAutoIncrement_Get(long long int handle);
extern void core_ColumnMetadata_IsAutoIncrement_Set(long long int handle, char val);
extern char core_ColumnMetadata_IsNullable_Get(long long int handle);
extern void core_ColumnMetadata_IsNullable_Set(long long int handle, char val);

// --- wrapping struct: core.DB ---
//
extern long long int core_DB_CTor();
extern char* core_DB_Close(long long int _handle);
extern char* core_DB_Ping(long long int _handle);

// --- wrapping struct: core.DatabaseConfig ---
//
extern long long int core_DatabaseConfig_CTor();
extern char* core_DatabaseConfig_Host_Get(long long int handle);
extern void core_DatabaseConfig_Host_Set(long long int handle, char* val);
extern long long int core_DatabaseConfig_Port_Get(long long int handle);
extern void core_DatabaseConfig_Port_Set(long long int handle, long long int val);
extern char* core_DatabaseConfig_User_Get(long long int handle);
extern void core_DatabaseConfig_User_Set(long long int handle, char* val);
extern char* core_DatabaseConfig_Password_Get(long long int handle);
extern void core_DatabaseConfig_Password_Set(long long int handle, char* val);
extern char* core_DatabaseConfig_Database_Get(long long int handle);
extern void core_DatabaseConfig_Database_Set(long long int handle, char* val);
extern char* core_DatabaseConfig_SSLMode_Get(long long int handle);
extern void core_DatabaseConfig_SSLMode_Set(long long int handle, char* val);

// --- wrapping struct: core.EntityMetadata ---
//
extern long long int core_EntityMetadata_CTor();
extern char* core_EntityMetadata_TableName_Get(long long int handle);
extern void core_EntityMetadata_TableName_Set(long long int handle, char* val);
extern char* core_EntityMetadata_PrimaryKey_Get(long long int handle);
extern void core_EntityMetadata_PrimaryKey_Set(long long int handle, char* val);
extern long long int core_EntityMetadata_Columns_Get(long long int handle);
extern void core_EntityMetadata_Columns_Set(long long int handle, long long int val);
extern long long int core_EntityMetadata_ColumnOrder_Get(long long int handle);
extern void core_EntityMetadata_ColumnOrder_Set(long long int handle, long long int val);
extern char* core_EntityMetadata_BuildSelectQuery(long long int _handle);
extern char* core_EntityMetadata_BuildInsertQuery(long long int _handle);
extern char* core_EntityMetadata_BuildUpdateQuery(long long int _handle);
extern char* core_EntityMetadata_BuildDeleteQuery(long long int _handle);

// --- wrapping struct: core.TakeoAPI ---
//
extern long long int core_TakeoAPI_CTor();
extern char* core_TakeoAPI_RegisterEntity(long long int _handle, char* name, char* tableName, char* columnsJSON, char* primaryKey);
extern long long int core_TakeoAPI_Save(long long int _handle, char* entityType, char* dataJSON);
extern char* core_TakeoAPI_FindByID(long long int _handle, char* entityType, long long int id);
extern char* core_TakeoAPI_FindAll(long long int _handle, char* entityType);
extern char* core_TakeoAPI_Update(long long int _handle, char* entityType, long long int id, char* updateJSON);
extern char* core_TakeoAPI_Delete(long long int _handle, char* entityType, long long int id);
extern char* core_TakeoAPI_CreateTable(long long int _handle, char* entityType);
extern char* core_TakeoAPI_DropTable(long long int _handle, char* entityType);
extern char* core_TakeoAPI_Close(long long int _handle);
extern char* core_TakeoAPI_Ping(long long int _handle);

// --- wrapping struct: core.TakeoManager ---
//
extern long long int core_TakeoManager_CTor();
extern char* core_TakeoManager_RegisterEntity(long long int _handle, char* name, char* tableName, long long int columns, char* primaryKey);
extern long long int core_TakeoManager_Save(long long int _handle, char* entityType, long long int entityData);
extern long long int core_TakeoManager_SaveBatch(long long int _handle, char* entityType, long long int entitiesData);
extern long long int core_TakeoManager_FindByID(long long int _handle, char* entityType, long long int id);
extern long long int core_TakeoManager_FindAll(long long int _handle, char* entityType);
extern long long int core_TakeoManager_FindWhere(long long int _handle, char* entityType, long long int conditions);
extern char* core_TakeoManager_Update(long long int _handle, char* entityType, long long int id, long long int updates);
extern char* core_TakeoManager_UpdateBatch(long long int _handle, char* entityType, long long int updates);
extern char* core_TakeoManager_Delete(long long int _handle, char* entityType, long long int id);
extern char* core_TakeoManager_DeleteBatch(long long int _handle, char* entityType, long long int ids);
extern long long int core_TakeoManager_DeleteWhere(long long int _handle, char* entityType, long long int conditions);
extern char* core_TakeoManager_CreateTable(long long int _handle, char* entityType);
extern char* core_TakeoManager_DropTable(long long int _handle, char* entityType);
extern long long int core_TakeoManager_BeginTransaction(long long int _handle);
extern char* core_TakeoManager_Close(long long int _handle);
extern char* core_TakeoManager_Ping(long long int _handle);

// --- wrapping struct: core.UpdateData ---
//
extern long long int core_UpdateData_CTor();
extern long long int core_UpdateData_ID_Get(long long int handle);
extern void core_UpdateData_ID_Set(long long int handle, long long int val);
extern long long int core_UpdateData_Updates_Get(long long int handle);
extern void core_UpdateData_Updates_Set(long long int handle, long long int val);

// --- wrapping struct: core.EntityRegistry ---
//
extern long long int core_EntityRegistry_CTor();
extern void core_EntityRegistry_RegisterEntity(long long int _handle, long long int entityType, char* tableName, long long int metadata, char goRun);
extern void core_EntityRegistry_RegisterEntityByName(long long int _handle, char* entityName, long long int metadata, char goRun);
extern long long int core_EntityRegistry_GetEntityGopy(long long int _handle, char* typeName);

// --- wrapping struct: core.Repository ---
//
extern long long int core_Repository_CTor();
extern char* core_Repository_Create(long long int _handle, char* entity);
extern char* core_Repository_FindByID(long long int _handle, long long int entityType, char* id, char* result);
extern char* core_Repository_FindAll(long long int _handle, long long int entityType, char* results);
extern char* core_Repository_Update(long long int _handle, char* entity);
extern char* core_Repository_Delete(long long int _handle, long long int entityType, char* id);
extern long long int core_NewTakeoORM(char* host, long long int port, char* user, char* password, char* database, char* sslmode);
extern long long int core_NewDB(long long int config);
extern long long int core_ExtractEntityMetadata(long long int entityType, char* tableName);
extern long long int core_NewTakeoAPI(char* host, long long int port, char* user, char* password, char* database, char* sslmode);
extern long long int core_NewTakeoManager(char* host, long long int port, char* user, char* password, char* database, char* sslmode);
extern long long int core_NewEntityRegistry();
extern long long int core_NewRepository(long long int db, long long int registry);

#ifdef __cplusplus
}
#endif
