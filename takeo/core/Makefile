# Makefile for python interface for package core.
# File is generated by gopy. Do not edit.
# gopy build -output=takeo/core -vm=python3 ./core

GOCMD=go
GOBUILD=$(GOCMD) build -mod=mod
GOIMPORTS=goimports
PYTHON=/usr/bin/python3
LIBEXT=.so

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = "-I/usr/include/python3.8"
LDFLAGS = "-L/usr/lib" "-lpython3.8" -lcrypt -lpthread -ldl  -lutil -lm -lm

all: gen build

gen:
	gopy gen -no-make -vm=python3 ./core

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm core.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w core.go
	# generate core_go$(LIBEXT) from core.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o core_go$(LIBEXT) core.go
	# use pybindgen to build the core.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# build the _core$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated core.py python wrapper imports this c-code package
	
	$(GCC) core.c  core_go$(LIBEXT) -o _core$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w
	


